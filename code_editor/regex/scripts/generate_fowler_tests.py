#!/usr/bin/python3

import os
import re
import sys

def read_test_data(filename):
    prev_pattern = None
    for line in open(filename, encoding="utf8"):
        if line[0] == '#':
            continue

        fields = [field.strip() for field in line.split("\t")]
        fields = [field for field in fields if len(field) != 0][:4]
        if len(fields) < 4:
            continue

        [flags, pattern, haystack, output, *_] = fields
        if pattern == "SAME":
            pattern = prev_pattern
        prev_pattern = pattern
        if "E" not in flags:
            continue
        haystack = "" if haystack == "NULL" else haystack
        haystack = re.sub(r"\\(?![nx])", r"\\\\", haystack)
        submatches = []
        if output != "NOMATCH":
            for match in re.finditer("\(([^,]*),([^)]*)\)", output):
                if match[1] == '?' and match[2] == '?':
                    submatches.append([None, None])
                else:
                    submatches.append([int(match[1]), int(match[2])])
        yield [pattern, haystack, submatches]


def main():
    filename = sys.argv[1]

    tests = list(read_test_data(filename))

    print("//! Generated by:")
    print("//! generate_fowler_tests.py <filename>")
    print()
    print("mod macros;")
    print()
    print("use crate::macros::test_regex;")
    print()
    basename, _ = os.path.splitext(os.path.basename(filename))
    for index, [pattern, haystack, submatches] in enumerate(tests):
        def position_to_string(position):
            if position is None:
                return "None"
            return "Some(%s)" % position

        name = "%s_%d" % (basename, index + 1)
        submatches = ", ".join([position_to_string(position) for submatch in submatches for position in submatch])
        print("test_regex!(%s, r#\"%s\"#, \"%s\", [%s]);" % (name, pattern, haystack, submatches))

if __name__ == '__main__':
    main()