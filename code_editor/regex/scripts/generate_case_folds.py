#!/usr/bin/python3

import sys
import unicode


def compute_delta(a, b):
    if a + 1 == b:
        if a % 2 == 0:
            return 1
        else:
            return -1
    if a == b + 1:
        if a % 2 == 0:
            return -1
        else:
            return 1
    return b - a


def apply_delta(a, delta):
    if delta == 1:
        if a % 2 == 0:
            return a + 1
        else:
            return a - 1
    if delta == -1:
        if a % 2 == 1:
            return a + 1
        else:
            return a - 1
    return a + delta


def main():
    ucd_dir = sys.argv[1]

    groups = unicode.simple_case_folding(ucd_dir)
    groups = list(groups.values())
    for group in groups:
        group.sort()
    groups.sort()

    pairs = []
    for group in groups:
        for index in range(len(group)):
            pairs.append([group[index - 1], group[index]])
    pairs.sort()

    entries = []
    for a, b in pairs:
        if entries and a == entries[-1][1] + 1 and b == apply_delta(a, entries[-1][2]):
                entries[-1][1] = a
                continue
        entries.append([a, a, compute_delta(a, b)])

    print("//! Generated by:")
    print("//! generate_simple_case_folding.py <ucd_dir>")
    print()
    print("use crate::Range;")
    print()
    print("pub(crate) static CASE_FOLDS: [(Range<char>, i32); %d] = [" % len(entries))
    for [first, last, delta] in entries:
        print("    (Range::new('\\u{%06x}', '\\u{%06x}'), %d)," % (first, last, delta))
    print("];")


if __name__ == '__main__':
    main()