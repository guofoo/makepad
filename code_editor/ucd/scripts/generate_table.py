#!/usr/bin/python3

"""Generating UCD tables."""

import argparse
import ucd


def group_sorted_values(values):
    """Groups a sorted list of values into a sorted list of ranges."""
    ranges = []
    first = None
    last = None
    for value in values:
        if last is not None:
            if value == last:
                continue
            elif value == last + 1:
                last = value
                continue
            ranges.append(range(first, last + 1))
        first = value
        last = value
    if first is not None:
        ranges.append(range(first, last + 1))
    return ranges


def print_file_header(property_name):
    """Prints the file header."""
    print("//! This file was generated by:")
    print("//! generate_table.py Extended_Pictographic <ucd_dir>")
    print()


def print_enumerated_property_table(name, property, default_value):
    """Prints an enumerated property table."""
    entries = []
    for value in property:
        for range in group_sorted_values(sorted(property[value])):
            entries.append([range[0], range[-1], value])
    entries.sort()

    print("#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]")
    print("#[repr(u8)]")
    print("pub enum %s {" % name.replace("_", ""))
    for value in sorted(property):
        print("    %s," % value.replace("_", ""))
    print("    %s," % default_value.replace("_", ""))
    print("}")
    print("")
    print("impl Default for %s {" % name.replace("_", ""))
    print("    fn default() -> Self {")
    print("        Self::%s" % default_value.replace("_", ""))
    print("    }")
    print("}")
    print("")
    print("#[rustfmt::skip]")
    print("pub(crate) static %s: [([u8; 3], [u8; 3], %s); %d] = [" % (
        name.upper(), name.replace("_", ""), len(entries)))
    for (first, last, value) in entries:
        print(
            "    ([0x%02X, 0x%02X, 0x%02X], [0x%02X, 0x%02X, 0x%02X], %s::%s)," %
            (*first.to_bytes(3, byteorder="big"),
             *last.to_bytes(3, byteorder="big"),
             name.replace("_", ""),
             value.replace("_", "")))
    print("];")


def print_binary_property_table(name, property):
    """Prints a binary property table."""
    entries = []
    for range in group_sorted_values(sorted(property)):
        entries.append([range[0], range[-1]])

    print("#[rustfmt::skip]")
    print("pub(crate) static %s: [([u8; 3], [u8; 3]); %d] = [" % (
        name.upper(), len(entries)))
    for (first, last) in entries:
        print(
            "    ([0x%02X, 0x%02X, 0x%02X], [0x%02X, 0x%02X, 0x%02X])," %
            (*first.to_bytes(3, byteorder="big"),
             *last.to_bytes(3, byteorder="big")))
    print("];")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("property_name", type=str, choices=[
                        "Extended_Pictographic", "Grapheme_Cluster_Break", "Word_Break"])
    parser.add_argument("ucd_dir", type=str)
    args = parser.parse_args()
    ucd_dir = args.ucd_dir
    if args.property_name == "Extended_Pictographic":
        extended_pictographic = ucd.extended_pictographic(ucd_dir)
        print_file_header(args.property_name)
        print_binary_property_table(
            args.property_name, extended_pictographic)
    elif args.property_name == "Grapheme_Cluster_Break":
        grapheme_cluster_break = ucd.grapheme_cluster_break(ucd_dir)
        print_file_header(args.property_name)
        print_enumerated_property_table(
            args.property_name, grapheme_cluster_break, "Other")
    elif args.property_name == "Word_Break":
        word_break = ucd.word_break(ucd_dir)
        print_file_header(args.property_name)
        print_enumerated_property_table(
            args.property_name, word_break, "Other")


if __name__ == '__main__':
    main()
